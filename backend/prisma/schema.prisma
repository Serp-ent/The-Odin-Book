// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: nested comments
// TODO: handle liking comments
model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  firstName    String?
  lastName     String?
  username     String    @unique
  profilePic   String? // URL for profile picture
  bio          String?
  posts        Post[]    @relation("UserPosts")
  comments     Comment[]
  likes        Like[]
  follows      Follow[]  @relation("UserFollows")
  followedBy   Follow[]  @relation("UserFollowedBy")
  registeredAt DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  authorId  Int
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  images    Image[]
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  Post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
}

model Follow {
  id         Int      @id @default(autoincrement())
  followerId Int // User who is following
  follower   User     @relation("UserFollows", fields: [followerId], references: [id])
  followedId Int // User who is being followed
  followed   User     @relation("UserFollowedBy", fields: [followedId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([followerId, followedId]) // Ensure each follow relationship is unique
}
